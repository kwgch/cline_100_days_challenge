; Description: clineのルール

- アプリはスマホで動作することを前提に、かつPCでも操作できるようにすること
- スマホの場合にタップで画面が動かないようにすること
- 同じファイルへの操作を2回失敗するならプランを再検討すること
- memory-bankを適宜更新すること
- README.mdを作成すること
- ファイルが大きくなりそうなら分割を検討すること

# ロール定義
あなたの名前はclineです。

下記仕様に従って、アプリの開発を行います。

はい、承知いたしました。
カメラ入力をアスキーアートに変換し、文字が落下するエフェクトを持つWebアプリケーションの仕様書とアーキテクチャ設計書をMarkdown形式で作成します。AIコーディングエージェントclineへの指示として利用できます。

---

## 仕様書：リアルタイム・アスキーアート・ドロップ

### 1. 概要

本アプリケーションは、デバイスのカメラから取得した映像をリアルタイムでアスキーアートに変換し、カラフルな文字が画面上部からぽろぽろと落下するような視覚効果を生成するWebアプリケーションです。主にスマートフォンの縦画面での利用を想定しつつ、PCのブラウザでも動作するように設計します。

### 2. 機能要件

*   **カメラ入力:**
    *   ユーザーにカメラへのアクセス許可を求める。
    *   許可された場合、デバイスのフロントカメラ（デフォルト）またはバックカメラからの映像を取得する。
    *   （オプション）カメラ切り替え機能。
*   **アスキーアート変換:**
    *   カメラ映像の各フレームを解析し、輝度情報に基づいてアスキー文字に変換する。
    *   使用する文字セットは、輝度を段階的に表現できるものとする（例: `@%#*+=-:. ` など、空白を含む）。
    *   変換の解像度（サンプリング間隔）は調整可能とする（パフォーマンスと見た目のバランス）。
*   **カラーリング:**
    *   変換された各アスキー文字に色を付ける。
    *   色は、対応する映像ピクセルの色情報を基にする。
    *   色はカラフルにするが、彩度や明度を調整し、「濃すぎない」パステル調などの目に優しい色合いにする。
    *   背景色は黒（`#000000`）とする。
*   **表示:**
    *   変換・色付けされたアスキー文字を指定されたコンテナ要素内に表示する。
    *   文字は等幅フォント（Monospace）を使用する。
*   **落下アニメーション:**
    *   生成されたアスキー文字が、画面上部の対応する位置から重力に従うように自然に下方へ落下するアニメーションを実装する。
    *   文字はランダムなタイミングや速度で「ぽろぽろ」と落ちてくるように見せる。
    *   画面下部や一定時間が経過した文字は適切に消去し、パフォーマンスを維持する。
*   **レスポンシブデザイン:**
    *   スマートフォンの縦画面表示に最適化されたレイアウトを基本とする。
    *   PCブラウザなど、他の画面サイズでも適切に表示されるようにレスポンシブ対応を行う。アスペクト比が変わる場合、表示エリアを調整する。
*   **操作:**
    *   特別な操作は不要とし、アプリ起動後すぐにカメラ映像のアスキーアート変換と落下アニメーションが開始されるようにする。
    *   （オプション）画面タップ/マウスクリックで何らかのインタラクション（例: 落下速度の一時的変更、色の変化など）を追加。

### 3. 非機能要件

*   **パフォーマンス:** アニメーションがカクつかないよう、リアルタイム処理（フレームレート30fps程度を目指す）を可能な限りスムーズに行う。DOM操作や計算負荷に配慮する。
*   **使用技術:** HTML, CSS, JavaScript (ES6+)。外部ライブラリの使用は可（必要最低限に留めることが望ましい）。
*   **対応ブラウザ:** 最新版のChrome, Firefox, Safari, Edge。
*   **UI/UX:** シンプルで直感的。ユーザーは設定不要で楽しめること。

---

## アーキテクチャ設計書：リアルタイム・アスキーアート・ドロップ

### 1. 全体構成

本アプリケーションは、以下の3つの主要な要素で構成されます。

*   **HTML (`index.html`):** アプリケーションの基本構造を定義。カメラ映像表示用（非表示も可）、処理用Canvas、アスキーアート表示用コンテナを配置。
*   **CSS (`style.css`):** アプリケーションの見た目を定義。レイアウト、背景色、文字のフォント・色、アニメーションなどを担当。レスポンシブ対応も含む。
*   **JavaScript (`script.js`):** アプリケーションの動作ロジックを担当。カメラアクセス、映像処理、アスキーアート変換、DOM操作、アニメーション制御を行う。

### 2. HTML構造 (`index.html`)

```html
<!DOCTYPE html>
<html lang="ja">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0, user-scalable=no">
    <title>ASCII Art Drop</title>
    <link rel="stylesheet" href="style.css">
</head>
<body>
    <!-- カメラ映像表示用 (デバッグ用、通常は非表示) -->
    <video id="video" playsinline autoplay muted style="display: none;"></video>

    <!-- 映像処理用Canvas (非表示) -->
    <canvas id="canvas" style="display: none;"></canvas>

    <!-- アスキーアート表示コンテナ -->
    <div id="ascii-container"></div>

    <script src="script.js"></script>
</body>
</html>
```

### 3. CSS設計 (`style.css`)

*   **基本スタイル:**
    *   `body`, `html`: `margin: 0; padding: 0; width: 100%; height: 100%; overflow: hidden; background-color: #000000;`
    *   `#ascii-container`: `width: 100%; height: 100%; position: relative; font-family: 'Courier New', Courier, monospace;` (等幅フォント指定)
*   **文字要素スタイル:**
    *   アスキーアートの各文字は `` 要素などで生成し、`position: absolute;` で配置。
    *   初期の `color` はJavaScriptで動的に設定。
    *   `font-size` は画面サイズに応じて調整（レスポンシブ）。
*   **落下アニメーション:**
    *   JavaScriptの `requestAnimationFrame` を使用して `transform: translateY()` を更新する方式を採用。CSSアニメーションより柔軟な制御が可能。
    *   （代替案）シンプルな落下であれば、各文字要素にCSSアニメーションクラスを付与し、`@keyframes` で `transform: translateY()` を変化させる方法も検討可能。
*   **レスポンシブ対応:**
    *   メディアクエリ (`@media`) を使用し、画面幅に応じて `#ascii-container` のレイアウトや文字サイズ (`font-size`) を調整。スマホ縦画面を基準とする。

### 4. JavaScriptロジック (`script.js`)

*   **初期化 (`init`):**
    *   HTML要素（`video`, `canvas`, `ascii-container`）への参照を取得。
    *   カメラアクセス (`navigator.mediaDevices.getUserMedia`) を要求。
*   **カメラアクセス成功時 (`handleSuccess`):**
    *   取得した `MediaStream` を `video` 要素の `srcObject` に設定。
    *   `video` の `play()` を呼び出し。
    *   `video` のメタデータ読み込み完了後 (`loadedmetadata` イベント)、Canvasのサイズを `video` の解像度に合わせて設定。
    *   メインループ (`update`) を `requestAnimationFrame` で開始。
*   **メインループ (`update`):**
    *   `video` の現在のフレームを `canvas` に描画 (`drawImage`)。
    *   `canvas` からピクセルデータを取得 (`getImageData`)。
    *   **アスキー変換 & 色付け:**
        *   `imageData.data` (RGBAの配列) を一定のステップ（例: 8ピクセルごと）で走査。
        *   各サンプリング点でのピクセル情報 (R, G, B) を取得。
        *   RGBから輝度を計算 (例: `0.299*R + 0.587*G + 0.114*B`)。
        *   輝度に応じてアスキー文字セットから文字を選択。
        *   RGB値から HSL (Hue, Saturation, Lightness) に変換。
        *   彩度(S)と明度(L)を調整し（例: Sを少し下げ、Lを上げる）、濃すぎない色 (`hsl(H, S', L')`) を生成。
        *   新しい文字要素 (``) を生成。
        *   `span.textContent` に選択したアスキー文字を設定。
        *   `span.style.color` に調整後の色を設定。
        *   `span.style.left`, `span.style.top` に対応する画面上の初期位置を設定（Canvas上の座標を画面座標に変換）。
        *   `span.dataset.vy` のようなカスタムデータ属性に初期落下速度（例: ランダムな小さい値）を設定。
        *   `ascii-container` に `span` を追加。
    *   **落下アニメーション:**
        *   `ascii-container` 内のすべての子要素 (`span`) を取得。
        *   各 `span` に対して:
            *   現在の `transform: translateY()` 値または `top` 値を取得。
            *   速度 (`vy`) に基づいて新しいY座標を計算（重力加速度を考慮する場合は `vy` を少しずつ増加）。
            *   `span.style.transform = translateY(...)` または `span.style.top` を更新。
            *   `span.dataset.vy` を更新。
            *   要素が画面下端を超えたら、DOMから削除 (`span.remove()`)。
    *   `requestAnimationFrame(update)` で次のフレームを要求。
*   **ユーティリティ関数:**
    *   `rgbToHsl(r, g, b)`: RGBをHSLに変換する関数。
    *   `mapRange(value, inMin, inMax, outMin, outMax)`: 値をある範囲から別の範囲にマッピングする関数（輝度から文字インデックスへの変換などに使用）。

### 5. 外部ライブラリ

*   現時点では必須の外部ライブラリはない。
*   色変換が複雑な場合、`chroma-js` のような色操作ライブラリの利用を検討。
*   より物理的にリアルな落下や衝突を実装したい場合は、`Matter.js` のような2D物理エンジンの導入を検討（ただし複雑性が増す）。

### 6. データフロー

1.  **カメラ映像取得:** `getUserMedia` → `MediaStream`
2.  **フレーム描画:** `MediaStream` → `video` 要素 → `canvas` (`drawImage`)
3.  **ピクセルデータ取得:** `canvas` → `ImageData` (`getImageData`)
4.  **解析・変換:** `ImageData` → 輝度計算 → アスキー文字選択
5.  **色付け:** `ImageData` (RGB) → HSL変換・調整 → 文字色決定
6.  **DOM生成:** アスキー文字、色、初期位置 → `` 要素生成 → `ascii-container` へ追加
7.  **アニメーション:** `requestAnimationFrame` ループ → 各 `` の位置更新 (`transform`/`top`) → 画面外要素の削除

---
