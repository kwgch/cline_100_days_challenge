; Description: clineのルール

- 指示に対して、無理な時はその旨を伝えて、無茶な変更を行わないこと
- アプリはスマホで動作することを前提に、かつPCでも操作できるようにすること
- スマホの場合にタップで画面が動かないようにすること
- 同じファイルへの操作を2回失敗するならプランを再検討すること
- memory-bankを適宜更新すること
- README.mdを作成すること
- ファイルが大きくなりそうなら分割を検討すること

# ロール定義
あなたの名前はclineです。

下記仕様に従って、アプリの開発を行います。

---

## p5.js 3Dジェネラティブアート インタラクティブ化 仕様書

### 1. 概要

本仕様書は、提供されたp5.jsによる3Dジェネラティブアート作品に、ユーザーインタラクション機能を追加するための要件を定義する。
主な目的は、スマートフォン（縦画面）およびPC（マウス）環境において、追加のUI要素なしに、直感的な操作（スワイプ、ピンチ）でアート作品の視点や表示を操作できるようにすることである。

### 2. 目的

-   既存のp5.jsアート作品にインタラクティブ性を持たせ、ユーザーエンゲージメントを高める。
-   スマートフォンでのタップ、スワイプ、ピンチ操作、およびPCでのマウスクリック、ドラッグ、ホイール操作に対応する。
-   UI要素（ボタン、スライダー等）を追加せず、作品自体の操作で完結させる。
-   レスポンシブデザインに対応し、特にスマートフォンの縦画面表示に最適化する。

### 3. 対象コード

提供されたp5.jsスケッチコード。
主な特徴：
-   WEBGLモードを使用
-   複数の`box()`を`for`ループで描画
-   `angle`変数に基づいて時間経過と共に形状、色、スケールが変化
-   全体が自動的に回転するアニメーション

```javascript
let angle = 0;
let scalar = 70;
let boxSize;
const numBoxes = 128;
const fr = 30
function setup() {
  createCanvas(windowWidth, windowHeight, WEBGL);
  colorMode(HSB, 360, 100, 100);
  frameRate(fr);
}

function draw() {
  background(0);
  noFill();
  strokeWeight(2);
  // 全体の自動回転
  rotateX(angle * 0.5);
  rotateY(angle * 0.7);
  rotateZ(angle * 1.1);

  for (let i = 0; i `要素を配置するためのコンテナ（通常は``直下）。
-   **CSS (`style.css`):**
    -   `` や `` のデフォルトマージン・パディングを削除し、`overflow: hidden;` を設定してスクロールバーを防ぐ。
    -   `` 要素が画面全体に表示されるように基本的なスタイルを設定 (`display: block;`)。
-   **JavaScript (`sketch.js`):**
    -   p5.jsの `setup()` および `draw()` 関数を含むスケッチ本体。
    -   インタラクションとレスポンシブ対応のロジックを実装。

### 2. 主要な変更点と実装方針

#### 2.1. インタラクションの実装: `orbitControl()`の活用

-   **方針:** p5.jsの組み込み関数 `orbitControl()` を利用する。この関数は、マウスドラッグ（回転）、マウスホイール（ズーム）、タッチスワイプ（回転）、ピンチ（ズーム）の基本的なカメラ操作を自動で処理するため、要求仕様に合致し、実装が容易である。
-   **実装箇所:** `draw()` 関数の冒頭で `orbitControl()` を呼び出す。
    ```javascript
    function draw() {
        background(0);
        orbitControl(); // ← これを追加
        // ... (以降の描画処理)
    }
    ```
-   **効果:**
    -   ユーザーのマウス/タッチ操作に応じてカメラの位置・向きが自動で更新される。
    -   元のコードにあった `draw()` 内のグローバルな `rotateX()`, `rotateY()`, `rotateZ()` は、`orbitControl()` によるカメラ制御と競合するため削除する。（要素ごとの回転は維持）

#### 2.2. アニメーションの維持

-   **方針:** `angle` 変数の更新と、それを用いた要素ごとのアニメーション（色、サイズ、スケール、内部回転）はそのまま維持する。
-   **実装箇所:** `draw()` 関数の末尾にある `angle += 0.05;` は変更しない。ループ内の `map()` や `rotateX/Y/Z()`、`scale()` の呼び出しも維持する。

#### 2.3. レスポンシブ対応: `windowResized()`

-   **方針:** p5.jsの `windowResized()` イベントハンドラ関数を利用し、ウィンドウサイズが変更された際にキャンバスサイズを再設定する。
-   **実装箇所:** グローバルスコープに `windowResized()` 関数を定義する。
    ```javascript
    function windowResized() {
      resizeCanvas(windowWidth, windowHeight);
    }
    ```
-   **`setup()`での初期設定:** `setup()` 内の `createCanvas()` は `windowWidth`, `windowHeight` を使用して初期サイズを設定する。これは変更しない。

#### 2.4. HTML/CSSの準備

-   **HTML (`index.html`):**
    ```html
    <!DOCTYPE html>
    <html>
    <head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Interactive 3D Art</title>
    <link rel="stylesheet" href="style.css">
    <script src="https://cdnjs.cloudflare.com/ajax/libs/p5.js/1.9.0/p5.js"></script> <!-- p5.js library -->
    <script src="sketch.js"></script> <!-- Your sketch file -->
    </head>
    <body>
    </body>
    </html>
    ```
-   **CSS (`style.css`):**
    ```css
    html, body {
      margin: 0;
      padding: 0;
      overflow: hidden; /* Prevent scrollbars */
      height: 100%;
      background-color: #000; /* Match sketch background */
    }
    canvas {
      display: block; /* Remove potential bottom margin */
    }
    ```

### 3. コード変更の詳細 (`sketch.js`)

```javascript
let angle = 0;
let scalar = 70;
let boxSize;
const numBoxes = 128;
const fr = 30;

function setup() {
  // WEBGLモードでウィンドウ全体にキャンバスを作成
  createCanvas(windowWidth, windowHeight, WEBGL);
  // 色モードとフレームレートは維持
  colorMode(HSB, 360, 100, 100);
  frameRate(fr);
  // 初期カメラ位置などは orbitControl のデフォルトに任せるか、
  // 必要であれば camera() や perspective() で調整可能だが、
  // まずは orbitControl のみで様子を見る
}

function draw() {
  background(0);
  // マウス/タッチ操作でカメラを制御
  orbitControl(); // ★変更点: orbitControl を呼び出し

  noFill();
  strokeWeight(2);

  // rotateX(angle * 0.5);
  // rotateY(angle * 0.7);
  // rotateZ(angle * 1.1);

  // 各要素の描画ループは維持
  for (let i = 0; i < numBoxes; i++) {
    const radius = scalar * i * 0.5; // ★調整: 半径を少し小さくして見やすくする（任意）

    // アニメーションに関わる計算は維持
    boxSize = map(sin(angle * 2 + i * 0.1), -1, 1, 10, 30); // 微調整（任意）
    const hue = map(i, 0, numBoxes, 0, 360);
    const saturation = map(sin(angle + i * 0.05), -1, 1, 50, 100); // 微調整（任意）
    const brightness = map(cos(angle * 0.5 + i * 0.05), -1, 1, 60, 100); // 微調整（任意）
    stroke(hue, saturation, brightness);

    const x = cos(i * 1.1) * radius; // 微調整（任意）
    const y = sin(i * 1.4) * radius; // 微調整（任意）
    const z = sin(i * 0.6) * radius; // 微調整（任意）

    push();
    translate(x, y, z);

    // 要素自体の回転アニメーションは維持
    rotateX(angle * 0.6 + i * 0.02); // 微調整（任意）
    rotateY(angle * 0.8 + i * 0.02); // 微調整（任意）
    rotateZ(angle * 1.2 + i * 0.02); // 微調整（任意）

    // スケールアニメーションも維持
    const boxScale = map(sin(angle * 0.7 + i * 0.1), -1, 1, 0.5, 1.5); // 微調整（任意）
    scale(boxScale);

    // 箱の描画（複数サイズ）は維持
    box(boxSize);
    // box(boxSize / 2); // 負荷軽減のためコメントアウトも検討
    // box(boxSize * 2); // 負荷軽減のためコメントアウトも検討
    pop();
  }

  // アニメーション用の角度更新は維持
  angle += 0.03; // ★調整: 少し遅くする（任意）
}

// ★追加: ウィンドウリサイズ対応
function windowResized() {
  resizeCanvas(windowWidth, windowHeight);
}

```
*(注: 上記コード内の `★調整` や `微調整（任意）` とコメントされている箇所は、インタラクティブ化に伴い見た目の印象が変わる可能性があるため、必要に応じて調整することを推奨するパラメータ例です。)*

### 4. 実装上の注意点

-   `orbitControl()` はデフォルトでシーンの中心（0, 0, 0）を注視点とします。現在の描画内容が原点中心に広がっているため、多くの場合これで問題ありませんが、必要に応じて `orbitControl()` の引数で感度などを調整できます。
-   パフォーマンス: スマートフォンでの動作が重い場合、`numBoxes` の数を減らす、`box()` の呼び出し回数を減らす（例: `boxSize/2` や `boxSize*2` の描画を省略する）、`frameRate()` の値を下げるなどの最適化を検討します。
-   p5.jsライブラリのバージョンは、`orbitControl` が安定して動作するもの（例: 1.x系）を使用します。HTML内のCDNリンクは適宜最新版等に更新してください。

---
