; Description: clineのルール

- 同じファイルへの操作を2回失敗するならプランを再検討してください。
- memory-bankを適宜更新してください。
- README.mdを作成してください。
- ファイルが大きくなりそうなら分割を検討してください。

# ロール定義
あなたの名前はclineです。

下記仕様に従って、アプリの開発を行います。

# 花火ゲーム仕様書・アーキテクチャ設計書

## 仕様書

### 概要
シンプルな花火ゲームで、ユーザーは画面上に打ち上がる花火をタップして爆発させ、スコアを獲得します。

### 機能要件
- **表示環境**: 夜空の背景（暗い背景）
- **ゲームプレイ**:
  - 画面下から花火（弾）が打ち上がる
  - 花火は放物線を描いて上昇し、その後落下する
  - プレイヤーは花火をタップして爆発させる
  - 爆発はパーティクルエフェクトで表現する
- **スコアリング**:
  - 花火を爆発させるとスコアが加算される
  - スコアは画面上部に表示される
- **技術要件**:
  - HTML、JavaScript、CSSのみで実装
  - 外部サーバー不要（ローカルファイルのみで動作）
  - スマートフォン対応（タッチ操作）
  - 爆発エフェクトは外部ライブラリ（CDN経由）を使用

## アーキテクチャ設計書

### ファイル構成
```
./
├── index.html      # メインHTMLファイル
├── css/
│   └── style.css   # スタイルシート
└── js/
    ├── game.js     # ゲームのメインロジック
    ├── firework.js # 花火クラス
    └── particle.js # パーティクルクラス
```

### コンポーネント設計

#### 1. ゲームエンジン (game.js)
- ゲームループの管理
- 花火の生成と管理
- タッチイベントの処理
- スコア管理
- 画面描画

#### 2. 花火クラス (firework.js)
- 花火の状態管理（位置、速度、加速度）
- 花火の描画
- 花火の動きの計算（放物線運動）
- 爆発判定

#### 3. パーティクルシステム
- 爆発時のパーティクル生成
- パーティクルの動きと寿命の管理
- パーティクルの描画

### 技術仕様

#### HTML (index.html)
```html
<!DOCTYPE html>
<html lang="ja">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0, user-scalable=no">
    <title>花火ゲーム</title>
    <link rel="stylesheet" href="css/style.css">
    <!-- パーティクルエフェクト用ライブラリ（例：particles.js） -->
    <script src="https://cdn.jsdelivr.net/particles.js/2.0.0/particles.min.js"></script>
</head>
<body>
    <div id="score-container">
        <span id="score">0</span>
    </div>
    <canvas id="game-canvas"></canvas>
    
    <script src="js/particle.js"></script>
    <script src="js/firework.js"></script>
    <script src="js/game.js"></script>
</body>
</html>
```

#### CSS (style.css)
```css
body {
    margin: 0;
    padding: 0;
    overflow: hidden;
    background-color: #000;
    touch-action: manipulation;
}

#game-canvas {
    display: block;
    width: 100%;
    height: 100vh;
}

#score-container {
    position: absolute;
    top: 20px;
    left: 0;
    width: 100%;
    text-align: center;
    z-index: 10;
}

#score {
    font-size: 2em;
    color: white;
    font-family: Arial, sans-serif;
    text-shadow: 0 0 5px rgba(255, 255, 255, 0.7);
}
```

#### JavaScript

##### game.js
```javascript
class Game {
    constructor() {
        this.canvas = document.getElementById('game-canvas');
        this.ctx = this.canvas.getContext('2d');
        this.fireworks = [];
        this.particles = [];
        this.score = 0;
        this.scoreElement = document.getElementById('score');
        
        // キャンバスサイズの設定
        this.resizeCanvas();
        window.addEventListener('resize', () => this.resizeCanvas());
        
        // タッチイベントの設定
        this.canvas.addEventListener('touchstart', (e) => this.handleTouch(e));
        
        // ゲームループの開始
        this.lastTime = 0;
        requestAnimationFrame((timestamp) => this.gameLoop(timestamp));
        
        // 定期的に花火を発射
        setInterval(() => this.launchFirework(), 1000);
    }
    
    resizeCanvas() {
        this.canvas.width = window.innerWidth;
        this.canvas.height = window.innerHeight;
    }
    
    launchFirework() {
        const x = Math.random() * this.canvas.width;
        const speedY = -15 - Math.random() * 5; // 上向きの初速度
        this.fireworks.push(new Firework(x, this.canvas.height, speedY));
    }
    
    handleTouch(e) {
        e.preventDefault();
        const touch = e.touches[0];
        const rect = this.canvas.getBoundingClientRect();
        const x = touch.clientX - rect.left;
        const y = touch.clientY - rect.top;
        
        // タップした位置に近い花火を探す
        for (let i = 0; i = 0; i--) {
            const firework = this.fireworks[i];
            firework.update(deltaTime / 1000);
            firework.draw(this.ctx);
            
            // 画面外に出た花火を削除
            if (firework.y > this.canvas.height || firework.exploded) {
                this.fireworks.splice(i, 1);
            }
        }
        
        // パーティクルの更新と描画
        for (let i = this.particles.length - 1; i >= 0; i--) {
            const particle = this.particles[i];
            particle.update(deltaTime / 1000);
            particle.draw(this.ctx);
            
            // 寿命が尽きたパーティクルを削除
            if (particle.alpha  this.gameLoop(timestamp));
    }
}

// ゲーム開始
window.onload = () => {
    new Game();
};
```

##### firework.js
```javascript
class Firework {
    constructor(x, y, speedY) {
        this.x = x;
        this.y = y;
        this.speedX = (Math.random() - 0.5) * 3; // 左右のランダムな速度
        this.speedY = speedY;
        this.gravity = 9.8; // 重力加速度
        this.radius = 5;
        this.color = `hsl(${Math.random() * 360}, 100%, 50%)`;
        this.exploded = false;
    }
    
    update(deltaTime) {
        // 位置の更新
        this.x += this.speedX * deltaTime;
        this.y += this.speedY * deltaTime;
        
        // 速度の更新（重力の影響）
        this.speedY += this.gravity * deltaTime;
    }
    
    draw(ctx) {
        ctx.beginPath();
        ctx.arc(this.x, this.y, this.radius, 0, Math.PI * 2);
        ctx.fillStyle = this.color;
        ctx.fill();
    }
    
    explode(particles) {
        // 爆発時にパーティクルを生成
        const particleCount = 100;
        for (let i = 0; i < particleCount; i++) {
            const angle = Math.random() * Math.PI * 2;
            const speed = 1 + Math.random() * 3;
            const particle = new Particle(
                this.x,
                this.y,
                Math.cos(angle) * speed,
                Math.sin(angle) * speed,
                this.color
            );
            particles.push(particle);
        }
        this.exploded = true;
    }
}
```

##### particle.js
```javascript
class Particle {
    constructor(x, y, speedX, speedY, color) {
        this.x = x;
        this.y = y;
        this.speedX = speedX;
        this.speedY = speedY;
        this.color = color;
        this.alpha = 1; // 透明度
        this.decay = 0.02 + Math.random() * 0.03; // 透明度の減衰率
        this.gravity = 0.5; // パーティクルへの重力
    }
    
    update(deltaTime) {
        // 位置の更新
        this.x += this.speedX * deltaTime * 60;
        this.y += this.speedY * deltaTime * 60;
        
        // 重力の影響
        this.speedY += this.gravity * deltaTime;
        
        // 透明度の減衰
        this.alpha -= this.decay * deltaTime * 60;
        if (this.alpha < 0) this.alpha = 0;
    }
    
    draw(ctx) {
        ctx.globalAlpha = this.alpha;
        ctx.beginPath();
        ctx.arc(this.x, this.y, 2, 0, Math.PI * 2);
        ctx.fillStyle = this.color;
        ctx.fill();
        ctx.globalAlpha = 1;
    }
}
```

### 実装上の注意点

1. **パフォーマンス最適化**:
   - パーティクル数を適切に調整する
   - 画面外のオブジェクトは適切に削除する
   - requestAnimationFrameを使用してアニメーションを最適化する

2. **モバイル対応**:
   - タッチイベントの適切な処理
   - viewport設定でピンチズームを無効化
   - パフォーマンスを考慮したエフェクト設計

3. **拡張性**:
   - 難易度調整機能の追加が容易な設計
   - 花火の種類や効果音の追加が可能な構造

この設計に基づいて実装することで、スマートフォンで動作する、シンプルながらも視覚的に楽しい花火ゲームが作成できます。
