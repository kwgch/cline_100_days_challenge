; Description: clineのルール

- アプリはスマホで動作することを前提に、かつPCでも操作できるようにすること
- スマホの場合にタップで画面が動かないようにすること
- 同じファイルへの操作を2回失敗するならプランを再検討すること
- memory-bankを適宜更新すること
- README.mdを作成すること
- ファイルが大きくなりそうなら分割を検討すること

# ロール定義
あなたの名前はclineです。

下記仕様に従って、アプリの開発を行います。

```markdown
# 推理データパズル 開発仕様書

## 1. 基本要件
- **プラットフォーム**: スマホメイン（タッチ操作対応）・PC（クリック操作）対応
- **技術スタック**: HTML5 / CSS3 / Vanilla JavaScript
- **動作環境**: ローカルファイルのみ（オフライン動作可能）
- **対応ブラウザ**: Chrome最新版 / Safari最新版 / Edge最新版

## 2. ゲーム仕様

### 2.1 ゲームフロー
```
graph TD
    A[ゲーム開始] --> B[キャラクター表示]
    B --> C[ヒントボタン表示]
    C --> D{ヒント選択}
    D --> E[ヒント情報表示]
    E --> F{キャラ選択}
    F --> G[正解判定]
    G --> H[結果表示]
    H --> I{再挑戦}
    I -->|Yes| B
    I -->|No| J[終了]
```

### 2.2 UIコンポーネント
| 要素 | 説明 | 技術要件 |
|------|------|----------|
| 問題表示 | 常に上部に表示 | `position: sticky`で固定 |
| キャラクター領域 | 3つの円形アイコン | CSS Grid + Flexbox |
| ヒントボタン | タップ可能な3ボタン | タッチターゲット最小48px |
| 選択肢ボタン | 動的に生成 | DOM操作で追加 |
| 結果表示 | 正解/不正解フィードバック | CSSアニメーション付き |

### 2.3 データ構造
```
const gameData = {
  question: "誰が一番高くジャンプできる？",
  characters: [
    {
      name: "A",
      attributes: {
        age: 8,
        color: "赤",
        height: 120,
        jump: 60 // 正解判定用キー
      },
      display: "🐱" // 絵文字または画像パス
    },
    // ...他のキャラクター
  ],
  hints: ["age", "color", "height"]
};
```

## 3. アーキテクチャ設計

### 3.1 ファイル構造
```
📦src
 ┣ 📂assets
 ┃ ┣ 📜style.css
 ┃ ┗ 📜script.js
 ┣ 📜index.html
 ┗ 📂images (任意)
   ┣ 📜character1.png
   ┗ 📜character2.png
```

### 3.2 HTML構造
```
<div class="container">
  <header>
    <h1 id="question">
    </h1>
  </header>
  <div class="character-grid" id="characters">
  </div>
  <div class="hint-buttons">
    <button data-hint-type="age">年齢</button>
    <button data-hint-type="color">色</button>
    <button data-hint-type="height">身長</button>
  </div>
  <div class="choice-buttons" id="choices">
  </div>
  <div class="result" id="result">
  </div>
</div>
```

### 3.3 CSS設計方針
```
/* モバイルファースト */
.container {
  max-width: 600px;
  margin: 0 auto;
  padding: 1rem;
}

.character-grid {
  display: grid;
  grid-template-columns: repeat(3, 1fr);
  gap: 1rem;
}

/* タッチターゲット最適化 */
button {
  min-width: 80px;
  min-height: 48px;
  touch-action: manipulation;
}

/* メディアクエリ（PC用） */
@media (hover: hover) {
  button:hover {
    filter: brightness(1.1);
  }
}
```

### 3.4 JavaScriptモジュール設計
| モジュール | 責任範囲 |
|-----------|----------|
| GameManager | ゲーム全体の進行管理 |
| DataLoader | 問題データの読み込み・検証 |
| UIRenderer | DOM要素の動的生成/更新 |
| InputHandler | ユーザー入力の処理 |
| FeedbackSystem | 正解判定とアニメーション制御 |

## 4. 開発計画

### 4.1 フェーズ分割
1. **コア機能実装**（3日）
   - データ構造定義
   - 基本UI構築
   - 正解判定ロジック
2. **UX強化**（2日）
   - タッチ操作最適化
   - CSSアニメーション追加
   - レスポンシブ対応
3. **拡張機能**（2日）
   - 問題データ拡充
   - スコアシステム
   - 効果音追加

### 4.2 テスト項目
| テスト種別 | 実施内容 |
|------------|----------|
| クロスブラウザ | Chrome/Safari/Edgeでの表示確認 |
| タッチ動作 | スマホ実機での操作性確認 |
| パフォーマンス | Lighthouseによるスコア計測 |
| アクセシビリティ | スクリーンリーダー対応 |

## 5. デプロイ要件
- すべてのリソースを同一ディレクトリに配置
- 外部依存ライブラリなし
- 画像はWebP形式で最適化（任意）
- Service Workerによるオフラインキャッシュ（任意拡張）



# 推理データパズル JavaScript設計書

## 1. 概要

本ゲームのJavaScriptは、シンプルな構造でありながら拡張性を意識し、**モジュール的な設計**とします。  
主要な責務ごとに関数やクラスを分割し、可読性と保守性を高めます。


## 2. モジュール構成

| モジュール名       | 主な責任                                               |
|-------------------|------------------------------------------------------|
| GameManager       | ゲーム全体の進行管理、状態管理                        |
| DataLoader        | 問題データの管理・取得                                |
| UIRenderer        | UIの動的生成・更新                                    |
| InputHandler      | ユーザーの入力処理（タッチ・クリック）                |
| FeedbackSystem    | 正解判定、結果表示、アニメーション                    |


## 3. モジュール詳細

### 3.1 GameManager

- **役割**  
  ゲームの状態（現在の問題、ヒントの使用状況、選択状況など）を一元管理し、各モジュールを制御。
- **主なプロパティ**
  - `currentQuestionIndex`
  - `gameData`
  - `usedHints`
  - `selectedCharacter`
- **主なメソッド**
  - `initGame()`
  - `startNewRound()`
  - `resetRound()`
  - `handleHintSelection(hintType)`
  - `handleCharacterSelection(characterIndex)`
  - `showResult(isCorrect)`

### 3.2 DataLoader

- **役割**  
  問題データの取得・検証。将来的なデータ拡張も見据え、配列やJSONからのロードに対応。
- **主なプロパティ**
  - `questions`（問題データ配列）
- **主なメソッド**
  - `loadQuestions()`
  - `getQuestion(index)`

### 3.3 UIRenderer

- **役割**  
  UIの初期描画・更新・クリアを一括管理。DOM操作を集約し、再利用性を高める。
- **主なメソッド**
  - `renderQuestion(question)`
  - `renderCharacters(characters)`
  - `renderHintButtons(hints, usedHints)`
  - `renderChoiceButtons(characters)`
  - `renderResult(message, isCorrect)`
  - `clearResult()`

### 3.4 InputHandler

- **役割**  
  タッチ・クリックイベントの登録・管理。UIとGameManagerを橋渡し。
- **主なメソッド**
  - `registerHintButtonEvents()`
  - `registerCharacterChoiceEvents()`
  - `registerRetryEvent()`

### 3.5 FeedbackSystem

- **役割**  
  正解判定、結果表示、アニメーションや効果音の制御。
- **主なメソッド**
  - `checkAnswer(selectedCharacter, question)`
  - `showFeedback(isCorrect)`
  - `playAnimation(isCorrect)`
  - `playSound(isCorrect)`（拡張用）


## 4. ゲームデータ構造

```
const questions = [
  {
    question: "誰が一番高くジャンプできる？",
    characters: [
      {
        name: "A",
        display: "🐱",
        attributes: { age: 8, color: "赤", height: 120, jump: 60 }
      },
      {
        name: "B",
        display: "🐶",
        attributes: { age: 12, color: "青", height: 140, jump: 80 }
      },
      {
        name: "C",
        display: "🐰",
        attributes: { age: 10, color: "黄", height: 130, jump: 70 }
      }
    ],
    answerKey: "jump" // 正解判定に使う特徴量
  },
  // ...他の問題
];
```


## 5. 状態管理

```
const gameState = {
  currentQuestionIndex: 0,
  usedHints: [],
  selectedCharacter: null,
  isAnswered: false
};
```

## 6. イベントフロー

1. **ゲーム開始**  
   - `GameManager.initGame()`で初期化
   - `UIRenderer.renderQuestion()`で問題表示

2. **ヒントボタン押下**  
   - `InputHandler`がイベント検知
   - `GameManager.handleHintSelection(hintType)`呼び出し
   - `UIRenderer.renderHintButtons()`で使用済みヒントを更新
   - `UIRenderer.renderResult()`でヒント内容表示

3. **キャラクター選択**  
   - `InputHandler`がイベント検知
   - `GameManager.handleCharacterSelection(characterIndex)`呼び出し
   - `FeedbackSystem.checkAnswer()`で正誤判定
   - `UIRenderer.renderResult()`で結果表示
   - `FeedbackSystem.playAnimation()`でアニメーション

4. **再挑戦**  
   - `InputHandler`がイベント検知
   - `GameManager.resetRound()`で状態リセット
   - `UIRenderer.renderQuestion()`で再描画


## 7. コーディング規約

- ES6+構文を使用（`const`/`let`、アロー関数、分割代入など）
- グローバル変数は極力使わず、即時関数またはモジュールパターンでスコープ管理
- DOM要素の取得は`id`や`class`を明示的に指定
- イベントリスナは`addEventListener`で登録し、必要に応じて解除
- コメントは関数・重要ロジックに付与
- コードの可読性を重視し、適切なインデントと空白を使用
- 関数は単一責任を意識し、長くなりすぎないように分割
- CSSはBEM（Block Element Modifier）命名規則を採用

## 8. 拡張性・保守性

- 問題データはJSON配列で管理し、将来的な追加・変更が容易
- UI描画・ロジック・データを分離し、再利用やテストがしやすい構造
- 効果音やアニメーションの追加も、FeedbackSystemに集約して管理
- 新しいキャラクターや問題を追加する際は、`questions`配列に新しいオブジェクトを追加するだけで対応可能
- CSSはモジュール化し、テーマ変更やスタイルの追加が容易
- タッチ操作とクリック操作の両方に対応し、ユーザー体験を向上
- スマホとPCでの操作性を考慮し、CSSメディアクエリを使用してレスポンシブデザインを実現
- アニメーションや効果音は、必要に応じてFeedbackSystemに追加することで、他のモジュールに影響を与えずに拡張可能
- 将来的な機能追加（例: スコアシステム、タイマー機能など）も、GameManagerやUIRendererに新しいメソッドを追加することで対応可能
- ユーザーの選択履歴やスコアをlocalStorageに保存することで、次回起動時に復元可能




以上の設計に従い、`script.js`を実装してください。


# サンプル問題データ
```javascript
const questions = [
  {
    question: "誰が一番高くジャンプできる？",
    characters: [
      {
        name: "A",
        display: "🐱",
        attributes: { age: 8, color: "赤", height: 120, jump: 60 }
      },
      {
        name: "B",
        display: "🐶",
        attributes: { age: 12, color: "青", height: 140, jump: 80 }
      },
      {
        name: "C",
        display: "🐰",
        attributes: { age: 10, color: "黄", height: 130, jump: 70 }
      }
    ],
    answerKey: "jump"
  },
  {
    question: "誰が一番早く走れる？",
    characters: [
      {
        name: "A",
        display: "🐘",
        attributes: { age: 15, color: "灰", height: 250, speed: 40 }
      },
      {
        name: "B",
        display: "🐎",
        attributes: { age: 7, color: "茶", height: 160, speed: 88 }
      },
      {
        name: "C",
        display: "🐢",
        attributes: { age: 80, color: "緑", height: 30, speed: 2 }
      }
    ],
    answerKey: "speed"
  },
  {
    question: "誰が一番大きな声で鳴ける？",
    characters: [
      {
        name: "A",
        display: "🦁",
        attributes: { age: 6, color: "黄", height: 120, voice: 114 }
      },
      {
        name: "B",
        display: "🐔",
        attributes: { age: 2, color: "白", height: 40, voice: 90 }
      },
      {
        name: "C",
        display: "🐸",
        attributes: { age: 1, color: "緑", height: 10, voice: 80 }
      }
    ],
    answerKey: "voice"
  },
  {
    question: "誰が一番長生きできそう？",
    characters: [
      {
        name: "A",
        display: "🐭",
        attributes: { age: 1, color: "灰", height: 8, life: 3 }
      },
      {
        name: "B",
        display: "🐢",
        attributes: { age: 10, color: "緑", height: 30, life: 80 }
      },
      {
        name: "C",
        display: "🐶",
        attributes: { age: 4, color: "茶", height: 40, life: 15 }
      }
    ],
    answerKey: "life"
  },
  {
    question: "誰が一番背が高い？",
    characters: [
      {
        name: "A",
        display: "🦒",
        attributes: { age: 5, color: "黄", height: 500 }
      },
      {
        name: "B",
        display: "🐘",
        attributes: { age: 12, color: "灰", height: 250 }
      },
      {
        name: "C",
        display: "🦏",
        attributes: { age: 8, color: "灰", height: 170 }
      }
    ],
    answerKey: "height"
  }
];
```

