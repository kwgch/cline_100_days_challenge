; Description: clineのルール

- アプリはスマホで動作することを前提に、かつPCでも操作できるようにすること
- スマホの場合にタップで画面が動かないようにすること
- 同じファイルへの操作を2回失敗するならプランを再検討すること
- memory-bankを適宜更新すること
- README.mdを作成すること
- ファイルが大きくなりそうなら分割を検討すること

# ロール定義
あなたの名前はclineです。

下記仕様に従って、アプリの開発を行います。

はい、承知いたしました。
絵文字を使ったぷよぷよ風パズルゲームの仕様書とアーキテクチャ設計書をMarkdown形式で作成します。AIコーディングエージェントclineへの指示として利用できる形式を意識します。

---

## 絵文字パズルゲーム開発 仕様書

### 1. ゲーム概要

*   **ゲームタイトル案**: カオパズ - 顔文字マッチパズル - (KaoPuzz - Emoji Face Match Puzzle -)
*   **ゲーム内容**:
    *   フィールド上部にランダムな顔絵文字のペア（または単体）が出現し、下に落下します。
    *   プレイヤーは絵文字が落下している間に、左右移動と回転操作を行います。
    *   絵文字がフィールドの底または他の絵文字の上に到達すると固定されます。
    *   同じ種類の顔絵文字が縦または横に3つ以上繋がると消えます。
    *   絵文字が消えると、その上にあった絵文字が下に落下します。
    *   落下した結果、再び3つ以上繋がると連鎖して消え、高得点になります。
    *   フィールドの最上部まで絵文字が積み上がるとゲームオーバーです。
*   **ターゲットユーザー**: スマートフォンで手軽に遊べるパズルゲームを探しているユーザー。
*   **プラットフォーム**:
    *   **メイン**: スマートフォン（縦画面表示）のウェブブラウザ
    *   **サブ**: PCのウェブブラウザ
*   **使用技術**: HTML, CSS, JavaScript (特別なライブラリやフレームワークは必須としない)

### 2. ゲームルール詳細

*   **フィールド**:
    *   サイズ: 横6列 x 縦12行 (変更可能)
    *   構成: 格子状のセルで構成される。
*   **絵文字**:
    *   種類: 以下の5種類の顔絵文字を使用する (例)。
        *   😀 (Smiling Face with Open Mouth)
        *   😍 (Smiling Face with Heart-Eyes)
        *   🤔 (Thinking Face)
        *   😎 (Smiling Face with Sunglasses)
        *   😭 (Loudly Crying Face)
    *   出現: 基本的に2つの絵文字ペアで落下するが、単体の場合もあっても良い。次の落下絵文字は画面端に表示する。
*   **操作**:
    *   **スマートフォン**:
        *   左右移動: 画面の左半分/右半分をタップ、または左右にスワイプ。
        *   回転: 画面下部をタップ、または画面上方向へスワイプ。
        *   高速落下: 画面下方向へスワイプ。
    *   **PC**:
        *   左右移動: キーボードの左右矢印キー、またはマウスでドラッグ。
        *   回転: キーボードの上矢印キー、またはクリック。
        *   高速落下: キーボードの下矢印キー、または下方向へドラッグ。
*   **消去条件**: 同じ種類の絵文字が、固定後に縦または横に3つ以上隣接した場合に消去される。
*   **落下**:
    *   絵文字は一定時間ごとに1マス下に自動で落下する。
    *   消去が発生した場合、空いたスペースの上に位置する絵文字が下に落下する。
*   **連鎖**: 絵文字の落下によって再び消去条件が満たされると連鎖が発生する。
*   **スコア**:
    *   基本点: 消した絵文字の数に応じて加算。
    *   連鎖ボーナス: 連鎖数に応じてスコアに倍率がかかる。
*   **ゲームオーバー**: フィールドの最上列（操作中の絵文字が出現する場所のすぐ下）に絵文字が固定されてしまい、次の絵文字が出現できなくなった場合にゲームオーバーとなる。

### 3. 画面構成

*   **タイトル画面 (オプション)**:
    *   ゲームタイトル表示
    *   スタートボタン
*   **ゲーム画面**:
    *   **ゲームフィールド**: 絵文字が表示され、ゲームが進行するメインエリア。
    *   **スコア表示**: 現在のスコアを表示。
    *   **次の絵文字表示 (Next)**: 次に落下してくる絵文字ペアを表示。
    *   **ゲームオーバー表示**: ゲームオーバー時に表示されるメッセージと、リトライボタン。
*   **操作インターフェース**: スマートフォン/PCそれぞれの操作方法に対応する。（タップ領域やボタンなど）

### 4. その他要件

*   **レスポンシブデザイン**: スマートフォンの縦画面表示に最適化しつつ、PCのブラウザでもある程度快適にプレイできるようにする。
*   **サウンド (オプション)**: 絵文字が消える音、連鎖音、ゲームオーバー音などを追加。
*   **難易度調整 (オプション)**: ゲームが進むにつれて絵文字の落下速度を上げる。

---

## アーキテクチャ設計書

### 1. 全体構成

*   **HTML (index.html)**: ゲームの基本的な構造（DOM要素）を定義する。
*   **CSS (style.css)**: ゲームの見た目（レイアウト、色、フォント、アニメーション）を定義する。
*   **JavaScript (game.js)**: ゲームのロジック（ルール、操作、状態管理、描画）を実装する。

### 2. HTML (index.html)

```html
<!DOCTYPE html>
<html lang="ja">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0, user-scalable=no">
    <title>カオパズ - 顔文字マッチパズル -</title>
    <link rel="stylesheet" href="style.css">
</head>
<body>
    <div id="game-container">
        <header>
            <h1>カオパズ</h1>
            <div id="score-area">Score: <span id="score">0</span></div>
        </header>
        <div id="main-area">
            <div id="game-board">
                <!-- ゲームフィールドのセルはJSで動的に生成 -->
            </div>
            <div id="side-panel">
                <div id="next-emoji-area">
                    <p>Next:</p>
                    <div id="next-emoji">
                        <!-- 次の絵文字を表示 -->
                    </div>
                </div>
                <!-- (オプション) 操作ボタンなど -->
            </div>
        </div>
        <div id="game-over-overlay" style="display: none;">
            <h2>Game Over</h2>
            <p>Final Score: <span id="final-score">0</span></p>
            <button id="retry-button">Retry</button>
        </div>
    </div>

    <script src="game.js"></script>
</body>
</html>
```

*   `game-container`: ゲーム全体のコンテナ。
*   `score-area`: スコア表示エリア。
*   `game-board`: 6x12のゲームフィールド。内部のセルはJSで生成。
*   `next-emoji-area`: 次の絵文字表示エリア。
*   `game-over-overlay`: ゲームオーバー時に表示するオーバーレイ。

### 3. CSS (style.css)

*   **レイアウト**:
    *   `#game-container` を画面中央に配置。スマートフォンの縦画面に合わせた幅と高さ。
    *   `Flexbox` や `CSS Grid` を使用して、`#game-board` と `#side-panel` を配置。
    *   `#game-board` を格子状にレイアウト。
*   **スタイル**:
    *   `#game-board` のセルに罫線や背景色を設定。
    *   絵文字をセルの中央に配置し、適切なフォントサイズを設定。
    *   スコア、Next表示のスタイル。
    *   `#game-over-overlay` のスタイル（半透明背景、中央配置）。
*   **アニメーション**:
    *   絵文字の落下アニメーション (CSS `transform` や `transition`)。
    *   絵文字の消去アニメーション (例: フェードアウト、縮小)。
*   **レスポンシブ対応**:
    *   `@media` クエリを使用して、PC表示時のレイアウト調整（例: フォントサイズ、コンテナ幅）。

### 4. JavaScript (game.js)

*   **グローバル変数/定数**:
    *   フィールドの行数・列数 (`ROWS`, `COLS`)。
    *   絵文字の種類リスト (`EMOJI_TYPES`)。
    *   落下速度 (`fallSpeed`)。
    *   ゲーム状態 (`gameState`: 'playing', 'gameOver'など)。
*   **主要な関数/クラス**:
    *   **`initGame()`**:
        *   ゲーム状態の初期化（スコア、フィールド配列など）。
        *   フィールドのDOM要素を生成 (`createBoardDOM`)。
        *   最初の絵文字ペアを生成 (`spawnEmoji`)。
        *   ゲームループを開始 (`startGameLoop`)。
        *   イベントリスナーを設定 (`setupInputListeners`)。
    *   **`createBoardDOM()`**: HTMLにフィールドのセル要素を生成・配置。
    *   **`Board` クラス (または関連関数群)**:
        *   フィールドの状態を管理する2次元配列 (`boardState`)。
        *   `setEmoji(row, col, emojiType)`: 指定位置に絵文字を配置。
        *   `clearCell(row, col)`: 指定位置を空にする。
        *   `isOccupied(row, col)`: 指定位置が埋まっているか判定。
        *   `isValidPosition(row, col)`: 指定位置がフィールド内か判定。
    *   **`Emoji` クラス (または関連関数群)**:
        *   操作中の絵文字ペアの状態（位置、種類、回転状態）を管理 (`currentEmoji`)。
        *   `spawnEmoji()`: 新しい絵文字ペアを生成し、初期位置に配置。次の絵文字も準備。
        *   `moveLeft()`, `moveRight()`, `moveDown()`: 絵文字を移動。移動可能か (`canMove`) をチェック。
        *   `rotate()`: 絵文字ペアを回転。回転可能か (`canRotate`) をチェック。
        *   `hardDrop()`: 絵文字を一番下まで高速落下させる。
        *   `fixEmoji()`: 絵文字をフィールドに固定 (`boardState` を更新)。
    *   **`checkMatches()`**:
        *   フィールド全体をスキャンし、縦横3つ以上繋がっている絵文字を探す。
        *   繋がっている絵文字のリストを返す。
    *   **`clearMatches(matchedEmojis)`**:
        *   `checkMatches` で見つかった絵文字をフィールドから削除 (`boardState` を更新)。
        *   スコアを加算 (`updateScore`)。
        *   消去アニメーションをトリガー (`renderClearAnimation`)。
    *   **`handleGravity()`**:
        *   消えた絵文字の上にある絵文字を下に落下させる。
        *   `boardState` を更新。
        *   落下アニメーションをトリガー (`renderFallAnimation`)。
    *   **`updateScore(clearedCount, chainCount)`**: スコアを計算し、表示を更新。
    *   **`renderGame()`**:
        *   現在の `boardState` と `currentEmoji` に基づいて、HTML/CSSの表示を更新する。
        *   `requestAnimationFrame` を利用して効率的に描画。
    *   **`startGameLoop()`**:
        *   `setInterval` または `setTimeout` を再帰的に呼び出し、一定間隔で以下を実行:
            1.  操作中の絵文字を自動落下 (`moveDown`)。
            2.  着地したら `fixEmoji`。
            3.  `checkMatches` -> `clearMatches` -> `handleGravity` を連鎖がなくなるまで繰り返す。
            4.  新しい絵文字を生成 (`spawnEmoji`)。
            5.  ゲームオーバー判定 (`checkGameOver`)。
            6.  画面描画 (`renderGame`)。
    *   **`checkGameOver()`**: ゲームオーバー条件を満たしているかチェック。満たしていれば `gameOver()` を呼び出す。
    *   **`gameOver()`**:
        *   ゲームループを停止。
        *   ゲームオーバー表示 (`game-over-overlay`) を表示。
        *   最終スコアを表示。
        *   リトライボタンのリスナーを設定。
    *   **`setupInputListeners()`**:
        *   `keydown` (PC) や `touchstart`, `touchmove`, `touchend` (スマホ) イベントを監視。
        *   イベントに応じて `moveLeft`, `moveRight`, `rotate`, `hardDrop` を呼び出す。
        *   スマホのスワイプ判定ロジックを実装。
*   **描画**:
    *   DOM操作で各セルのクラス名やテキスト内容（絵文字）を更新する。
    *   CSSクラスの付け替えでアニメーションをトリガーする。

