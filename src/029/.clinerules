; Description: clineのルール

- アプリはスマホで動作することを前提に、かつPCでも操作できるようにすること
- スマホの場合にタップで画面が動かないようにすること
- 同じファイルへの操作を2回失敗するならプランを再検討すること
- memory-bankを適宜更新すること
- README.mdを作成すること
- ファイルが大きくなりそうなら分割を検討すること

# ロール定義
あなたの名前はclineです。

下記仕様に従って、アプリの開発を行います。

## 仕様書: 3Dメタボールインタラクティブビジュアライザー

### 概要

このプロジェクトは、WebGLを用いて3D空間にメタボールを表示するインタラクティブなビジュアライザーです。スマートフォンおよびPCのブラウザで動作し、直感的な操作でメタボールの位置操作やインタラクションが可能です。

### 機能

1.  **3Dメタボール表示**:
    *   WebGLを用いて3D空間に複数のメタボールをレンダリングします。
    *   メタボールは滑らかに融合し、有機的な形状を形成します。
2.  **ふわふわ移動**:
    *   メタボールは3D空間内をランダムかつ滑らかに移動します。
    *   移動速度や範囲は調整可能です。
3.  **インタラクティブな操作**:
    *   **スワイプ/ドラッグ操作**: スマートフォンのスワイプ操作またはPCのマウスドラッグ操作で、メタボールの表示位置を操作できます。
    *   **タッチ/クリック反応**: メタボールにタッチまたはクリックすると、一時的に色が変化し、視覚的なフィードバックを提供します。
4.  **レスポンシブデザイン**:
    *   スマートフォン（縦画面メイン）およびPCのブラウザに対応したレスポンシブな表示を行います。
    *   画面サイズに応じてメタボールのサイズや配置を調整します。

### 技術要件

*   **言語**: HTML, CSS, JavaScript
*   **ライブラリ**:
    *   WebGL
    *   Three.js (3Dグラフィックスライブラリ)
    *   GSAP (アニメーションライブラリ)
*   **開発環境**:
    *   Visual Studio Codeなどのテキストエディタ
    *   ブラウザ (Google Chrome, Safariなど)

### デザイン

*   **色**:
    *   背景色: ダークトーン
    *   メタボール色: 明るい色で、タッチ時に変化する色も定義
*   **フォント**:
    *   デフォルトのシステムフォントを使用
*   **UI**:
    *   シンプルなUIで、操作方法を直感的に理解できるようにする

## アーキテクチャ設計書

### 1. 全体構成

```
graph LR
    A[HTML] --> B[CSS]
    A --> C[JavaScript]
    C --> D[Three.js]
    C --> E[GSAP]
    D --> F[WebGL]
```

### 2. モジュール構成

1.  **HTML (index.html)**:
    *   WebGLの描画領域となるCanvas要素を定義します。
    *   CSSファイルとJavaScriptファイルを読み込みます。
2.  **CSS (style.css)**:
    *   Canvas要素のスタイルや背景色、レスポンシブデザインを定義します。
3.  **JavaScript (script.js)**:
    *   Three.jsを用いて3Dシーン、カメラ、レンダラーを初期化します。
    *   メタボールの作成、アニメーション、インタラクション処理を実装します。
    *   GSAPを用いて、メタボールの移動やタッチ時のアニメーションを制御します。
4.  **Three.js**:
    *   3Dオブジェクトの生成、シーンへの追加、レンダリングを行います。
    *   メタボールの形状生成には、球体や立方体などの基本形状を組み合わせて使用します。
5.  **GSAP**:
    *   メタボールの位置、スケール、色の変化をアニメーションさせます。
    *   タッチ時の反応やふわふわ移動を滑らかに実現します。
6.  **WebGL**:
    *   Three.jsによって生成された3Dシーンをブラウザに描画します。

### 3. メタボールの生成とアニメーション

1.  **メタボールの生成**:
    *   複数の球体または立方体をランダムな位置に配置します。
    *   各球体/立方体の半径やスケールを調整し、メタボールらしい形状を作成します。
    *   Three.jsの`SphereGeometry`や`BoxGeometry`を使用します。
2.  **ふわふわ移動**:
    *   GSAPの`to()`メソッドを用いて、各メタボールの位置をランダムにアニメーションさせます。
    *   `Math.random()`でランダムな移動先を生成し、`duration`や`ease`を調整して滑らかな動きを実現します。
3.  **タッチ/クリック反応**:
    *   `Raycaster`を用いて、タッチ/クリックされたメタボールを検出します。
    *   GSAPでスケールや色を一時的に変化させるアニメーションを実装します。

### 4. インタラクション処理

1.  **スワイプ/ドラッグ操作**:
    *   `addEventListener`を用いて、`touchstart`, `touchmove`, `touchend`（スマートフォン）または`mousedown`, `mousemove`, `mouseup`（PC）のイベントをリッスンします。
    *   イベント発生時のマウス/タッチ位置の変化量に応じて、カメラの位置を移動させます。
2.  **タッチ/クリック反応**:
    *   `addEventListener`を用いて、`touchstart`（スマートフォン）または`click`（PC）のイベントをリッスンします。
    *   `Raycaster`を用いて、タッチ/クリックされたオブジェクトを特定します。
    *   特定されたメタボールの色を一時的に変更し、アニメーションを開始します。

### 5. レンダリングループ

1.  **アニメーションフレーム**:
    *   `requestAnimationFrame()`を用いて、毎フレーム描画処理を行います。
    *   Three.jsの`renderer.render(scene, camera)`を呼び出し、シーンをレンダリングします。
    *   GSAPのアニメーションを更新します。
2.  **レスポンシブ対応**:
    *   `window.addEventListener('resize', ...)`でブラウザのリサイズイベントをリッスンします。
    *   リサイズ時に、カメラのアスペクト比やレンダラーのサイズを更新します。

### 6. コード例 (JavaScript)

```javascript
// シーン、カメラ、レンダラーの初期化
const scene = new THREE.Scene();
const camera = new THREE.PerspectiveCamera(75, window.innerWidth / window.innerHeight, 0.1, 1000);
const renderer = new THREE.WebGLRenderer();
renderer.setSize(window.innerWidth, window.innerHeight);
document.body.appendChild(renderer.domElement);

// メタボールの作成
const metaballs = [];
for (let i = 0; i  {
    mouse.x = (event.clientX / window.innerWidth) * 2 - 1;
    mouse.y = - (event.clientY / window.innerHeight) * 2 + 1;

    raycaster.setFromCamera(mouse, camera);

    const intersects = raycaster.intersectObjects(metaballs);

    if (intersects.length > 0) {
        const selectedObject = intersects[0].object;
        gsap.to(selectedObject.material.color, {
            duration: 0.1,
            r: Math.random(),
            g: Math.random(),
            b: Math.random(),
            yoyo: true,
            repeat: 1
        });
    }
}, false);

// アニメーションループ
function animate() {
    requestAnimationFrame(animate);
    renderer.render(scene, camera);
}
animate();
```

### 7. 開発手順

1.  **開発環境の構築**:
    *   HTML, CSS, JavaScriptファイルを作成します。
    *   Three.jsとGSAPをプロジェクトに導入します。
2.  **3Dシーンの初期化**:
    *   Three.jsを用いて、シーン、カメラ、レンダラーを初期化します。
3.  **メタボールの生成**:
    *   複数の球体/立方体を作成し、シーンに追加します。
4.  **アニメーションの実装**:
    *   GSAPを用いて、メタボールのふわふわ移動やタッチ時の反応をアニメーションさせます。
5.  **インタラクション処理の実装**:
    *   スワイプ/ドラッグ操作、タッチ/クリック反応を実装します。
6.  **レスポンシブ対応**:
    *   画面サイズに応じて表示を調整します。
7.  **テストと調整**:
    *   スマートフォンおよびPCのブラウザで動作確認を行い、必要に応じてパラメータを調整します。

### 8. その他

*   パフォーマンスの最適化のために、メタボールの数を適切に調整します。
*   シェーダーを用いて、より高度な表現を追求することも可能です。
*   UIを改善し、より直感的な操作を実現します。
